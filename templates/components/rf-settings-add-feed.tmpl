{% define "content" %}
<link rel="import" href="/dist/iron-pages/iron-pages.html">
<link rel="import" href="/dist/more-routing/more-route-template-helpers.html">
<link rel="import" href="/dist/more-routing/more-routing.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-checkbox/paper-checkbox.html">
<link rel="import" href="/dist/paper-input/paper-input.html">
<link rel="import" href="/dist/paper-material/paper-material.html">
<link rel="import" href="/dist/paper-spinner/paper-spinner.html">
<link rel="import" href="/dist/paper-toast/paper-toast.html">
<link rel="import" href="/dist/polymer/polymer.html">

<link rel="import" href="{% url "/component/rf-api" .base.r %}">
<link rel="import" href="{% url "/component/rf-keyboard-shortcuts" .base.r %}">

<dom-module id="rf-settings-add-feed">
    <style>
a[is="pushstate-anchor"] {
    position: relative;
    text-decoration: none;
}

a[is="pushstate-anchor"] paper-material {
    padding: 0.7em 0.57em;
    text-transform: uppercase;
}

ul {
    padding: 0;
}

li {
    padding: 8px;
    list-style: none;
}
li paper-checkbox {
    margin-right: 16px;
}
    </style>
    <template>
        <div class="card" class="layout vertical start">
            <div class="layout vertical">
                <more-route-selector on-more-route-change="onRouteChange">
                    <iron-pages>
                        <section route="settings-add-feed-discover">
                            <p>
                                {% __ "Enter the address of a feed, or a website that might contain one or more feeds." .base.lang %}
                            </p>

                            <paper-input id="feed-url" label="{% __ "URL" .base.lang %}" on-keypress="onUrlKeypress" data-error-no-feed="{% __ "No feeds were found" .base.lang %}" data-error-no-absolute="{% __ "The value is not a valid absolute URL" .base.lang %}" data-error-internal="{% __ "There was an error processing the request" .base.lang %}"></paper-input>

                            <p>
                                {% __ "Alternatively, you may provide an OPML file that contains a list of feeds." .base.lang %}
                            </p>

                            <paper-input type="file" id="opml" name="opml" accept=".opml" tabindex="2"></paper-input>

                            <div class="layout horizontal end-justified">
                                <paper-spinner class="loading-dependant" hidden$="[[ !loading ]]"></paper-spinner>
                                <paper-button id="find-feeds" on-tap="onFindFeeds" autofocus hidden$="[[ loading ]]">{% __ "Find" .base.lang %}</paper-button>
                            </div>
                        </section>

                        <section route="settings-add-feed-discover-not-found">
                            <p>{% __ "No feeds found" .base.lang %}</p>

                            <div class="layout horizontal end-justified">
                                <a is="pushstate-anchor" href="[[ urlFor('settings-add-feed-discover') ]]" style="position: relative;">
                                    <paper-material elevation="0">{% __ "Back" .base.lang %}</paper-material>
                                    <paper-ripple></paper-ripple>
                                </a>
                            </div>
                        </section>

                        <section route="settings-add-feed-discover-select">
                            <div hidden$="[[ _computeHideDiscoveredFeeds(discoveredFeeds) ]]">
                                <h4>{% __ "No feeds found" .base.lang %}</h4>
                            </div>
                            <div hidden$="[[ _computeHideDiscoveredFeeds(discoveredFeeds, 1) ]]">
                                <p>{% __ "Found the following feeds:" .base.lang %}</p>
                                <ul>
                                <template is="dom-repeat" items="{{ discoveredFeeds }}">
                                    <li class="layout horizontal center">
                                        <paper-checkbox checked="{{ item.selected }}"></paper-checkbox>
                                        <a href="[[ item.Link ]]">[[ item.Title ]]<br><small>[[ item.Description ]]</small></a>
                                    </li>
                                </template>
                                </ul>
                            </div>

                            <div class="layout horizontal end-justified">
                                <a is="pushstate-anchor" href="[[ urlFor('settings-add-feed-discover') ]]">
                                    <paper-material elevation="0">{% __ "Back" .base.lang %}</paper-material>
                                    <paper-ripple></paper-ripple>
                                </a>
                                <paper-spinner class="loading-dependant" hidden$="[[ !loading ]]"></paper-spinner>
                                <paper-button on-tap="onAddFeeds" autofocus hidden$="[[ _computeHideAddFeed(discoveredFeeds, loading) ]]">{% __ "Add" .base.lang %}</paper-button>
                            </div>
                        </section>

                        <section route="settings-add-feed-discover-select-none">
                            <p>{% __ "No feeds were selected" .base.lang %}</p>
                            <div class="layout horizontal end-justified">
                                <a is="pushstate-anchor" href="[[ urlFor('settings-add-feed-discover-select') ]]">
                                    <paper-material elevation="0">{% __ "Back" .base.lang %}</paper-material>
                                    <paper-ripple></paper-ripple>
                                </a>
                            </div>
                        </section>

                        <section route="settings-add-feed-discover-select-error">
                            <p>{% __ "Error adding selected feeds: " .base.lang %}<span>[[ addFeedError ]]</span></p>
                            <div class="layout horizontal end-justified">
                                <a is="pushstate-anchor" href="[[ urlFor('settings-add-feed-discover-select') ]]">
                                    <span>{% __ "Back" .base.lang %}</span>
                                    <paper-ripple></paper-ripple>
                                </a>
                            </div>
                        </section>
                    </iron-pages>
                </more-route-selector>
            </div>

        </div>

        <paper-toast id="add-feed-success" text="{% __ "Feed was added successfully" .base.lang %}"></paper-toast>

        <rf-api user="[[ user ]]" id="discover-feeds" method="discover-feeds" on-rf-api-message="onDiscoverFeedsMessage" on-rf-api-error="onDiscoverFeedsError" handles-errors></rf-api>
        <rf-api user="[[ user ]]" id="parse-opml" method="parse-opml" on-rf-api-message="onDiscoverFeedsMessage" on-rf-api-error="onDiscoverFeedsError" handles-errors></rf-api>
        <rf-api user="[[ user ]]" id="add-feeds" method="add-feeds" on-rf-api-message="onAddFeedMessage" on-rf-api-error="onAddFeedError" handles-errors></rf-api>

        <rf-keyboard-shortcut route-name="settings-add-feed-discover-select" key-code="13" on-press="onAddFeeds"></rf-keyboard-shortcut>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-settings-add-feed",
            behaviors: [
                NestedRouteBehavior,
                MoreRouting.TemplateHelpers,
            ],
            properties: {
                user: Object,
                discoveredFeeds: {
                    type: Array,
                    value: function() {
                        return null;
                    },
                },
                addFeedError: {
                    type: String,
                    value: "",
                },
                loading: {
                    type: Boolean,
                    value: false,
                    observer: '_loadingChanged',
                }
            },

            attached: function() {
                this.defaultNestedRoute('settings-add-feed', 'settings-add-feed-discover');
            },

            onRouteChange: function(event, detail) {
                this.loading = false;
            },

            onUrlKeypress: function() {
                var code = event.keyCode || event.charCode, key = event.keyIdentifier;

                if (key == 'Enter' || code == 13) {
                    this.onFindFeeds();
                }
            },

            onFindFeeds: function() {
                if (this.$.opml.$.input.files.length) {
                    var file = this.$.opml.$.input.files[0], fileReader = new FileReader();

                    fileReader.onload = function(event) {
                        var contents = event.target.result;

                        this.$['parse-opml'].send({opml: contents});
                    }.bind(this);

                    fileReader.readAsText(file);
                } else {
                    var url = this.$['feed-url'].value;
                    if (!url) {
                        this.$['feed-url'].required = true;
                        this.$['feed-url'].invalid = true;
                        return;
                    }

                    if (window.google && google.feeds && !/https?:\/\//.test(url)) {
                        google.feeds.findFeeds(url, function(response) {
                            if (response.status.code == 200) {
                                if (response.entries.length) {
                                    var feeds = [], urls = {};

                                    for (var i = 0, e; e = response.entries[i]; ++i) {
                                        if (!urls[e.url]) {
                                            feeds.push({
                                                Link: e.url,
                                                Title: this._stripTags(e.title),
                                                Description: this._stripTags(e.contentSnippet)
                                            });
                                            urls[e.url] = true;
                                        }
                                    }

                                    feeds[0].selected = true;
                                    this.onDiscoverFeedsMessage(null, {success: true, arguments: {Feeds: feeds, SkipSelection: true}});
                                } else {
                                    this.onDiscoverFeedsError();
                                }
                            } else {
                                this.onDiscoverFeedsError();
                            }
                        }.bind(this));
                    } else {
                        this.$['discover-feeds'].send({link: url});
                    }
                }
                this.loading = true;
            },

            onDiscoverFeedsMessage: function(event, data) {
                if (!data.arguments.SkipSelection) {
                    data.arguments.Feeds.forEach(function(f) {
                        f.selected = true;
                    });
                }
                this.discoveredFeeds = data.arguments.Feeds;

                if (!this.discoveredFeeds || !this.discoveredFeeds.length) {
                    MoreRouting.navigateTo('settings-add-feed-discover-not-found');
                } else {
                    MoreRouting.navigateTo('settings-add-feed-discover-select');
                }
            },

            onDiscoverFeedsError: function(event, data) {
                this.$['feed-url'].errorMessage = this.$['feed-url'].getAttribute("data-" + data.arguments.ErrorType);
                this.$['feed-url'].invalid = true;
                this.loading = false;
            },

            onAddFeeds: function() {
                var links = [];
                for (var i = 0, f; f = this.discoveredFeeds[i]; ++i) {
                    if (f.selected) {
                        links.push(f.Link);
                    }
                }

                if (!links.length) {
                    MoreRouting.navigateTo('settings-add-feed-discover-select-none')
                    return;
                }

                this.$['add-feeds'].send({links: links});
                this.loading = true;
            },

            onAddFeedMessage: function(event, data) {
                this.fire('iron-signal', {name: 'rf-feeds-added'});
                this.$['feed-url'].value = "";
                this.$['feed-url'].invalid = false;
                this.discoveredFeeds = null;

                this.$['add-feed-success'].show();
                MoreRouting.navigateTo('settings-add-feed-discover');
            },

            onAddFeedError: function(event, data) {
                this.addFeedError = data.error;
                MoreRouting.navigateTo('settings-add-feed-discover-select-error');
            },

            _loadingChanged: function(loading, old) {
                var dependants = Polymer.dom(this.root).querySelectorAll('.loading-dependant');
                dependants.forEach(function(d) {
                    if (loading) {
                        d.reset();
                        d.active = true;
                    } else {
                        d.active = false;
                    }
                });
            },

            _computeHideFindFeeds(discoveredFeeds, loading) {
                return !!discoveredFeeds || loading
            },

            _computeHideDiscoveredFeeds: function(discovered, invert) {
                return invert ? !discovered || discovered.length == 0 : discovered && discovered.length > 0;
            },

            _computeHideAddFeed: function(discovered, loading) {
                return loading || !discovered || discovered.length == 0;
            },

            _stripTags: function(html) {
                var div = document.createElement("div");
                div.innerHTML = html;

                return div.textContent || "";
            },
        })
    </script>
</dom-module>
{% end %}
